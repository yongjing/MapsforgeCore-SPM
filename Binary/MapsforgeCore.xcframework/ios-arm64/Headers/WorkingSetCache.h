//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/util/WorkingSetCache.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMapsforgeCoreUtilWorkingSetCache")
#ifdef RESTRICT_OrgMapsforgeCoreUtilWorkingSetCache
#define INCLUDE_ALL_OrgMapsforgeCoreUtilWorkingSetCache 0
#else
#define INCLUDE_ALL_OrgMapsforgeCoreUtilWorkingSetCache 1
#endif
#undef RESTRICT_OrgMapsforgeCoreUtilWorkingSetCache

#if !defined (OrgMapsforgeCoreUtilWorkingSetCache_) && (INCLUDE_ALL_OrgMapsforgeCoreUtilWorkingSetCache || defined(INCLUDE_OrgMapsforgeCoreUtilWorkingSetCache))
#define OrgMapsforgeCoreUtilWorkingSetCache_

#define RESTRICT_OrgMapsforgeCoreUtilLRUCache 1
#define INCLUDE_OrgMapsforgeCoreUtilLRUCache 1
#include "org/mapsforge/core/util/LRUCache.h"

@class JavaLangInteger;
@protocol JavaUtilSet;

@interface OrgMapsforgeCoreUtilWorkingSetCache : OrgMapsforgeCoreUtilLRUCache

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (void)setWorkingSetWithJavaUtilSet:(id<JavaUtilSet>)workingSet;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMapsforgeCoreUtilWorkingSetCache)

FOUNDATION_EXPORT void OrgMapsforgeCoreUtilWorkingSetCache_initWithInt_(OrgMapsforgeCoreUtilWorkingSetCache *self, jint capacity);

FOUNDATION_EXPORT OrgMapsforgeCoreUtilWorkingSetCache *new_OrgMapsforgeCoreUtilWorkingSetCache_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMapsforgeCoreUtilWorkingSetCache *create_OrgMapsforgeCoreUtilWorkingSetCache_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeCoreUtilWorkingSetCache)


#endif

#pragma pop_macro("INCLUDE_ALL_OrgMapsforgeCoreUtilWorkingSetCache")
